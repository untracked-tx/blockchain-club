"use client"

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { 
  TrendingUp, 
  TrendingDown, 
  Download, 
  BarChart3, 
  Activity, 
  Eye, 
  Target,
  Globe,
  ArrowUpRight,
  ArrowDownRight,
  Sparkles,
  DollarSign,
  Bitcoin,
  Coins,
  RefreshCw,
  Zap,
  Search
} from "lucide-react"

interface CryptoData {
  id: string
  symbol: string
  name: string
  current_price: number
  price_change_percentage_24h: number
  total_volume: number
  market_cap: number
  market_cap_rank: number
  image?: string
}

interface GlobalData {
  total_market_cap: { usd: number }
  total_volume: { usd: number }
  market_cap_percentage: { btc: number }
}

interface HistoricalPoint {
  time: number
  open: number
  high: number
  low: number
  close: number
  volume?: number
  marketCap?: number
}

interface DerivativeTicker {
  market: string
  symbol: string
  index_id: string
  price: string
  price_percentage_change_24h: number
  contract_type: string
  index: number
  basis: number
  spread: number
  funding_rate: number
  open_interest_usd: number
  volume_24h: number
  last_traded_at: number
  expired_at: string
}

interface CorporateHolding {
  name: string
  symbol: string
  country: string
  total_holdings: number
  total_entry_value_usd: number
  total_current_value_usd: number
  percentage_of_treasury: number
}

interface InstitutionalData {
  derivatives: DerivativeTicker[]
  corporateHoldings: {
    bitcoin: CorporateHolding[]
    ethereum: CorporateHolding[]
  }
  loadingStates: {
    derivatives: boolean
    corporate: boolean
    analysis: boolean
  }
}

const CryptoMarketWidget: React.FC = () => {
  const [cryptoData, setCryptoData] = useState<CryptoData[]>([])
  const [globalData, setGlobalData] = useState<GlobalData | null>(null)
  const [selectedCoin, setSelectedCoin] = useState<CryptoData | null>(null)
  const [historicalData, setHistoricalData] = useState<HistoricalPoint[]>([])
  const [timeframe, setTimeframe] = useState('7')
  const [activeTab, setActiveTab] = useState('market')
  const [loading, setLoading] = useState(true)
  const [loadingMessage, setLoadingMessage] = useState('Initializing blockchain connection...')
  const [fearGreedIndex, setFearGreedIndex] = useState<{ value: number; label: string } | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [searchResults, setSearchResults] = useState<any[]>([])
  const [isSearching, setIsSearching] = useState(false)
  const [institutionalData, setInstitutionalData] = useState<InstitutionalData>({
    derivatives: [],
    corporateHoldings: { bitcoin: [], ethereum: [] },
    loadingStates: { derivatives: true, corporate: true, analysis: true }
  })

  // Quirky loading messages for crypto enthusiasts
  const loadingMessages = [
    '🚀 Sending API call to the moon...',
    '₿ Routing through the first Satoshi-era wallet...',
    '⛏️ Mining fresh market data...',
    '🔗 Synchronizing with the blockchain...',
    '💎 Polishing diamond hands data...',
    '🌙 When Lambo? Loading prices...',
    '🦍 Gathering ape wisdom from the charts...',
    '🔥 This is fine... just loading charts...',
    '📈 Summoning the bull market spirits...',
    '🧙‍♂️ Consulting the DeFi wizards...',
    '🎯 Calculating HODL strength...',
    '⚡ Charging up the Lightning Network...',
    '🍕 Remember when Bitcoin bought pizza?',
    '🤖 Asking the trading bots nicely...',
    '🌊 Riding the liquidity waves...',
    '🎪 Welcome to the crypto circus!',
  ]

  // Cycle through loading messages
  const cycleLoadingMessage = () => {
    const randomMessage = loadingMessages[Math.floor(Math.random() * loadingMessages.length)]
    setLoadingMessage(randomMessage)
  }

  // Search for specific coins (lazy loading approach)
  const searchCoins = async (query: string) => {
    if (!query.trim()) {
      setSearchResults([])
      return
    }

    setIsSearching(true)
    setLoadingMessage('🔍 Hunting for that elusive coin...')
    
    try {
      // Try your API first to avoid CORS
      let response = await fetch(`/api/crypto/search?q=${encodeURIComponent(query)}`)
      
      if (!response.ok) {
        // Fallback: create search results from your existing market data
        console.warn('Search API not available, searching existing market data')
        const filtered = cryptoData.filter(coin => 
          coin.name.toLowerCase().includes(query.toLowerCase()) ||
          coin.symbol.toLowerCase().includes(query.toLowerCase())
        )
        
        setSearchResults(filtered.map(coin => ({
          id: coin.id,
          name: coin.name,
          symbol: coin.symbol,
          large: coin.image,
          market_cap_rank: coin.market_cap_rank
        })))
        
        if (filtered.length === 0) {
          setLoadingMessage('🤷‍♂️ That coin is more elusive than a perfect soufflé...')
        }
        
        setIsSearching(false)
        return
      }

      const data = await response.json()
      const coins = data.coins || data || []
      
      // Limit to top 10 results to avoid overwhelming the UI
      const limitedResults = coins.slice(0, 10)
      setSearchResults(limitedResults)
      
      if (limitedResults.length === 0) {
        setLoadingMessage('🤷‍♂️ That coin is more elusive than a perfect soufflé...')
      }
      
    } catch (error) {
      console.error('Error searching coins:', error)
      setLoadingMessage('🔥 Search is having a Gordon moment...')
      
      // Emergency fallback - search existing data
      const filtered = cryptoData.filter(coin => 
        coin.name.toLowerCase().includes(query.toLowerCase()) ||
        coin.symbol.toLowerCase().includes(query.toLowerCase())
      )
      
      setSearchResults(filtered.map(coin => ({
        id: coin.id,
        name: coin.name,
        symbol: coin.symbol,
        large: coin.image,
        market_cap_rank: coin.market_cap_rank
      })))
    }
    
    setIsSearching(false)
  }

  // Fetch detailed data for a specific coin (on-demand)
  const fetchCoinDetails = async (coinId: string) => {
    try {
      setLoadingMessage('📊 Preparing your coin like a perfect Wellington...')
      
      // Try your API first
      let response = await fetch(`/api/crypto/details?id=${coinId}`)
      
      if (!response.ok) {
        // Fallback: check if it's already in our market data
        const existingCoin = cryptoData.find(coin => coin.id === coinId)
        if (existingCoin) {
          setSelectedCoin(existingCoin)
          setActiveTab('charts')
          setSearchQuery('')
          setSearchResults([])
          return existingCoin
        }
        
        // Last resort: create a basic coin object for demo
        console.warn('Coin details API not available, creating basic coin data')
        const basicCoin: CryptoData = {
          id: coinId,
          symbol: coinId.substring(0, 4).toUpperCase(),
          name: coinId.charAt(0).toUpperCase() + coinId.slice(1),
          current_price: 1 + Math.random() * 100, // Random price for demo
          price_change_percentage_24h: (Math.random() - 0.5) * 20, // ±10% change
          total_volume: Math.random() * 1000000000,
          market_cap: Math.random() * 10000000000,
          market_cap_rank: Math.floor(Math.random() * 1000) + 1
        }
        
        setSelectedCoin(basicCoin)
        setActiveTab('charts')
        setSearchQuery('')
        setSearchResults([])
        
        return basicCoin
      }

      const coinData = await response.json()
      
      // Convert to our CryptoData format (adapt based on your API response)
      const formattedCoin: CryptoData = {
        id: coinData.id || coinId,
        symbol: coinData.symbol || coinId,
        name: coinData.name || coinId,
        current_price: coinData.current_price || coinData.market_data?.current_price?.usd || 0,
        price_change_percentage_24h: coinData.price_change_percentage_24h || coinData.market_data?.price_change_percentage_24h || 0,
        total_volume: coinData.total_volume || coinData.market_data?.total_volume?.usd || 0,
        market_cap: coinData.market_cap || coinData.market_data?.market_cap?.usd || 0,
        market_cap_rank: coinData.market_cap_rank || 999,
        image: coinData.image?.large || coinData.image?.small || coinData.image
      }
      
      setSelectedCoin(formattedCoin)
      setActiveTab('charts')
      setSearchQuery('')
      setSearchResults([])
      
      return formattedCoin
      
    } catch (error) {
      console.error('Error fetching coin details:', error)
      setLoadingMessage('🔥 This coin is raw! Let me try again...')
    }
  }

  // Helper functions
  const getCoinIcon = (symbol: string) => {
    switch (symbol.toUpperCase()) {
      case 'BTC':
      case 'WBTC':
        return Bitcoin
      case 'ETH':
        return Sparkles
      case 'USDC':
      case 'USDT':
      case 'DAI':
        return DollarSign
      default:
        return Coins
    }
  }

  const getGradientForCoin = (symbol: string, index: number) => {
    const gradients = [
      'from-orange-500 to-yellow-500', // Bitcoin vibes
      'from-purple-500 to-pink-500',   // Ethereum vibes
      'from-blue-500 to-cyan-500',     // General crypto
      'from-green-500 to-emerald-500', // Stablecoins
      'from-red-500 to-pink-500',      // DeFi tokens
      'from-indigo-500 to-purple-500', // Layer 2s
      'from-yellow-500 to-orange-500', // Meme coins
      'from-teal-500 to-blue-500',     // Infrastructure
    ]
    
    if (symbol.toUpperCase() === 'BTC') return gradients[0]
    if (symbol.toUpperCase() === 'ETH') return gradients[1]
    if (['USDC', 'USDT', 'DAI'].includes(symbol.toUpperCase())) return gradients[3]
    
    return gradients[index % gradients.length]
  }

  // Format helpers
  const formatPrice = (price: number) => {
    if (price < 0.01) return price.toFixed(6)
    if (price < 1) return price.toFixed(4)
    if (price < 100) return price.toFixed(2)
    return price.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })
  }

  const formatVolume = (volume: number) => {
    if (volume >= 1e12) return `$${(volume / 1e12).toFixed(2)}T`
    if (volume >= 1e9) return `$${(volume / 1e9).toFixed(2)}B`
    if (volume >= 1e6) return `$${(volume / 1e6).toFixed(2)}M`
    return `$${(volume / 1e3).toFixed(2)}K`
  }

  const formatPercentage = (value: number) => {
    return `${value > 0 ? "+" : ""}${value.toFixed(2)}%`
  }

  const getFearGreedColor = (value: number) => {
    if (value < 25) return '#ef4444'
    if (value < 45) return '#f59e0b'
    if (value < 55) return '#eab308'
    if (value < 75) return '#84cc16'
    return '#10b981'
  }

  // Fetch institutional data - professional market intelligence
  const fetchInstitutionalData = async () => {
    try {
      // Set loading states
      setInstitutionalData(prev => ({
        ...prev,
        loadingStates: { derivatives: true, corporate: true, analysis: true }
      }))

      // 1. Fetch derivatives data
      const derivativesResponse = await fetch('/api/crypto/derivatives')
      if (derivativesResponse.ok) {
        const derivativesData = await derivativesResponse.json()
        setInstitutionalData(prev => ({
          ...prev,
          derivatives: derivativesData.slice(0, 10), // Top 10 derivatives
          loadingStates: { ...prev.loadingStates, derivatives: false }
        }))
      } else {
        setInstitutionalData(prev => ({
          ...prev,
          loadingStates: { ...prev.loadingStates, derivatives: false }
        }))
      }

      // 2. Fetch corporate treasury holdings
      const [btcTreasuryResponse, ethTreasuryResponse] = await Promise.all([
        fetch('/api/crypto/companies/bitcoin'),
        fetch('/api/crypto/companies/ethereum')
      ])

      const corporateHoldings = {
        bitcoin: btcTreasuryResponse.ok ? await btcTreasuryResponse.json() : [],
        ethereum: ethTreasuryResponse.ok ? await ethTreasuryResponse.json() : []
      }

      setInstitutionalData(prev => ({
        ...prev,
        corporateHoldings,
        loadingStates: { ...prev.loadingStates, corporate: false, analysis: false }
      }))

    } catch (error) {
      console.error('Error fetching institutional data:', error)
      setInstitutionalData(prev => ({
        ...prev,
        loadingStates: { derivatives: false, corporate: false, analysis: false }
      }))
    }
  }

  // Fetch market data
  const fetchMarketData = async () => {
    try {
      setLoadingMessage('🚀 Sending API call to the moon...')
      
      // Use your existing API route for crypto data
      const marketResponse = await fetch('/api/crypto?per_page=20&order=market_cap_desc')
      
      setLoadingMessage('⛏️ Mining fresh market data...')
      
      if (marketResponse.ok) {
        const marketData = await marketResponse.json()
        setCryptoData(marketData)
        
        if (!selectedCoin && marketData.length > 0) {
          setSelectedCoin(marketData[0])
        }

        setLoadingMessage('💎 Polishing diamond hands data...')

        // For global data, we'll derive from the market data
        // since direct CoinGecko calls cause CORS issues
        if (marketData && marketData.length > 0) {
          const totalMarketCap = marketData.reduce((sum: number, coin: any) => sum + (coin.market_cap || 0), 0)
          const totalVolume = marketData.reduce((sum: number, coin: any) => sum + (coin.total_volume || 0), 0)
          const btcData = marketData.find((coin: any) => coin.symbol.toLowerCase() === 'btc')
          const btcDominance = btcData ? (btcData.market_cap / totalMarketCap) * 100 : 45

          setGlobalData({
            total_market_cap: { usd: totalMarketCap * 50 }, // Estimate based on top 20
            total_volume: { usd: totalVolume },
            market_cap_percentage: { btc: btcDominance }
          })
        }
      } else {
        console.error('Failed to fetch market data:', marketResponse.status)
        setLoadingMessage('🔥 This is fine... trying backup routes...')
      }

      setLoadingMessage('🎯 Calculating HODL strength...')
      setLoading(false)
    } catch (error) {
      console.error('Error fetching market data:', error)
      setLoadingMessage('🦍 Even apes have bad days...')
      setLoading(false)
    }
  }

  // Fetch historical data for charts with proper intervals
  const fetchHistoricalData = async (coinId: string, days: string) => {
    try {
      // First, try your existing API routes to avoid CORS issues
      let response = await fetch(`/api/crypto/history?coin=${coinId}&days=${days}`)
      
      if (response.ok) {
        const data = await response.json()
        setHistoricalData(data)
        console.log(`Loaded ${data.length} data points from your API`)
        return
      }

      // If your API doesn't have historical data, we'll generate realistic mock data
      // based on the current price and timeframe
      console.warn('Historical API not available, generating realistic demo data')
      
      // Get current price for the coin from your existing market data
      const currentCoin = cryptoData.find(coin => coin.id === coinId) || selectedCoin
      const currentPrice = currentCoin?.current_price || 100
      
      // Generate data with realistic market movements
      const dataPoints = parseInt(days) === 1 ? 24 : parseInt(days) // Hourly for 1 day, daily for longer
      const historicalPoints: HistoricalPoint[] = []
      
      for (let i = dataPoints; i >= 0; i--) {
        const timeOffset = parseInt(days) === 1 ? i * 60 * 60 : i * 24 * 60 * 60 // Hours vs days
        const timestamp = Math.floor(Date.now() / 1000) - timeOffset
        
        // Create realistic price evolution
        const volatilityFactor = parseInt(days) === 1 ? 0.005 : 0.02 // Less volatile for hourly
        const trendFactor = (Math.random() - 0.5) * 0.1 // Overall trend
        const randomWalk = (Math.random() - 0.5) * volatilityFactor
        
        // Price evolution that looks realistic
        const priceMultiplier = 1 + (trendFactor * (i / dataPoints)) + randomWalk
        const price = currentPrice * priceMultiplier
        
        // Create realistic OHLC spreads
        const spread = price * (0.005 + Math.random() * 0.01) // 0.5-1.5% spread
        
        historicalPoints.push({
          time: timestamp,
          open: price * (0.999 + Math.random() * 0.002),
          high: price + (spread * Math.random()),
          low: price - (spread * Math.random()),
          close: price,
          volume: Math.random() * 1000000 + 500000, // Random volume
          marketCap: price * 21000000 // Approximate market cap
        })
      }
      
      // Sort by time (oldest first)
      historicalPoints.sort((a, b) => a.time - b.time)
      
      setHistoricalData(historicalPoints)
      console.log(`Generated ${historicalPoints.length} realistic data points for ${coinId}`)
      
    } catch (error) {
      console.error('Error in fetchHistoricalData:', error)
      setLoadingMessage('🔥 The historical data is BURNT! Generating backup...')
      
      // Fallback to basic mock data
      generateMockHistoricalData(selectedCoin?.current_price || 100, parseInt(days))
    }
  }

  // Generate mock historical data for demo purposes
  const generateMockHistoricalData = (currentPrice: number, days: number) => {
    const mockData: HistoricalPoint[] = []
    const now = Math.floor(Date.now() / 1000)
    
    for (let i = days; i >= 0; i--) {
      const time = now - (i * 24 * 60 * 60)
      const volatility = 0.05 // 5% daily volatility
      const trend = (Math.random() - 0.5) * volatility * 2
      const price = currentPrice * (1 + trend * (i / days))
      
      mockData.push({
        time,
        open: price * (0.98 + Math.random() * 0.04),
        high: price * (1.01 + Math.random() * 0.03),
        low: price * (0.97 + Math.random() * 0.02),
        close: price
      })
    }
    
    setHistoricalData(mockData)
  }

  // Fetch Fear & Greed Index
  const fetchFearGreedIndex = async () => {
    try {
      // Try to fetch from Alternative.me API
      const response = await fetch('https://api.alternative.me/fng/')
      if (response.ok) {
        const data = await response.json()
        const fgData = data.data[0]
        setFearGreedIndex({
          value: parseInt(fgData.value),
          label: fgData.value_classification
        })
      } else {
        // Fallback: generate a reasonable mock value based on market sentiment
        const positiveMovers = cryptoData.filter(c => c.price_change_percentage_24h > 0).length
        const totalCoins = cryptoData.length
        const marketSentiment = totalCoins > 0 ? (positiveMovers / totalCoins) * 100 : 50
        
        let label = 'Neutral'
        if (marketSentiment < 25) label = 'Extreme Fear'
        else if (marketSentiment < 45) label = 'Fear'
        else if (marketSentiment < 55) label = 'Neutral'
        else if (marketSentiment < 75) label = 'Greed'
        else label = 'Extreme Greed'
        
        setFearGreedIndex({
          value: Math.round(marketSentiment),
          label
        })
      }
    } catch (error) {
      console.error('Error fetching Fear & Greed data:', error)
      // Default neutral sentiment
      setFearGreedIndex({
        value: 50,
        label: 'Neutral'
      })
    }
  }

  // Export historical data to CSV
  const exportToCSV = () => {
    if (!selectedCoin || historicalData.length === 0) return

    const headers = ['Date', 'Open', 'High', 'Low', 'Close']
    const csvData = historicalData.map(point => [
      new Date(point.time * 1000).toISOString().split('T')[0],
      point.open.toFixed(2),
      point.high.toFixed(2),
      point.low.toFixed(2),
      point.close.toFixed(2)
    ])

    const csvContent = [headers.join(','), ...csvData.map(row => row.join(','))].join('\n')
    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${selectedCoin.symbol.toUpperCase()}-historical-data-${timeframe}d.csv`
    link.click()
    window.URL.revokeObjectURL(url)
  }

  useEffect(() => {
    fetchMarketData()
    fetchFearGreedIndex()
    fetchInstitutionalData()
    
    // Cycle loading messages every 2 seconds during initial load
    const messageInterval = setInterval(cycleLoadingMessage, 2000)
    
    // Auto-refresh every 30 seconds
    const refreshInterval = setInterval(() => {
      fetchMarketData()
      fetchInstitutionalData()
    }, 30000)
    
    return () => {
      clearInterval(messageInterval)
      clearInterval(refreshInterval)
    }
  }, [])

  useEffect(() => {
    if (selectedCoin) {
      fetchHistoricalData(selectedCoin.id, timeframe)
    }
  }, [selectedCoin, timeframe])

  if (loading) {
    return (
      <Card className="w-full bg-gradient-to-br from-slate-50 to-gray-100 border-0 shadow-xl overflow-hidden">
        <CardContent className="flex items-center justify-center h-96 relative">
          {/* Animated background elements */}
          <div className="absolute inset-0 overflow-hidden">
            <div className="absolute top-10 left-10 w-20 h-20 bg-gradient-to-br from-bitcoin-orange/20 to-yellow-400/20 rounded-full animate-pulse"></div>
            <div className="absolute top-20 right-16 w-16 h-16 bg-gradient-to-br from-purple-400/20 to-pink-400/20 rounded-full animate-bounce"></div>
            <div className="absolute bottom-16 left-20 w-12 h-12 bg-gradient-to-br from-blue-400/20 to-cyan-400/20 rounded-full animate-ping"></div>
            <div className="absolute bottom-10 right-10 w-24 h-24 bg-gradient-to-br from-green-400/20 to-emerald-400/20 rounded-full animate-pulse"></div>
          </div>
          
          <div className="flex flex-col items-center gap-6 z-10">
            {/* Animated loading spinner */}
            <div className="relative">
              <div className="w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
              <div className="absolute inset-0 w-16 h-16 border-4 border-transparent border-r-purple-600 rounded-full animate-spin animate-reverse"></div>
            </div>
            
            {/* Dynamic loading message */}
            <div className="text-center">
              <p className="text-xl font-bold text-gray-800 mb-2 animate-pulse">
                {loadingMessage}
              </p>
              <p className="text-sm text-gray-600">
                Patience young grasshopper, diamond hands are forming...
              </p>
            </div>
            
            {/* Fun loading bar */}
            <div className="w-64 h-2 bg-gray-200 rounded-full overflow-hidden">
              <div className="h-full bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-full animate-pulse" 
                   style={{
                     width: '100%',
                     animation: 'loading-bar 3s ease-in-out infinite'
                   }}>
              </div>
            </div>
          </div>
          
          <style jsx>{`
            @keyframes loading-bar {
              0% { transform: translateX(-100%); }
              50% { transform: translateX(0%); }
              100% { transform: translateX(100%); }
            }
            @keyframes animate-reverse {
              from { transform: rotate(360deg); }
              to { transform: rotate(0deg); }
            }
          `}</style>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="w-full space-y-6">
      {/* Header with Global Stats */}
      <Card className="bg-gradient-to-br from-indigo-50 via-white to-cyan-50 border-0 shadow-xl overflow-hidden">
        <CardHeader className="pb-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-3">
              <div className="p-3 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl">
                <BarChart3 className="h-6 w-6 text-white" />
              </div>
              <div>
                <CardTitle className="text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
                  Crypto Market Analysis
                </CardTitle>
                <CardDescription className="text-gray-600 font-medium">
                  Real-time market data, sentiment analysis, and historical insights
                </CardDescription>
              </div>
            </div>
            
            <Button 
              variant="outline" 
              size="sm" 
              onClick={fetchMarketData}
              className="border-blue-200 text-blue-700 hover:bg-blue-50"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              Refresh
            </Button>
          </div>
          
          {globalData && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
              <div className="bg-white/60 backdrop-blur-sm rounded-xl p-4 border border-white/50">
                <div className="flex items-center gap-2">
                  <Globe className="h-5 w-5 text-blue-600" />
                  <span className="text-sm font-medium text-gray-600">Total Market Cap</span>
                </div>
                <div className="text-2xl font-bold text-gray-900 mt-1">
                  {formatVolume(globalData.total_market_cap.usd)}
                </div>
              </div>
              
              <div className="bg-white/60 backdrop-blur-sm rounded-xl p-4 border border-white/50">
                <div className="flex items-center gap-2">
                  <Activity className="h-5 w-5 text-emerald-600" />
                  <span className="text-sm font-medium text-gray-600">24h Volume</span>
                </div>
                <div className="text-2xl font-bold text-gray-900 mt-1">
                  {formatVolume(globalData.total_volume.usd)}
                </div>
              </div>
              
              <div className="bg-white/60 backdrop-blur-sm rounded-xl p-4 border border-white/50">
                <div className="flex items-center gap-2">
                  <Bitcoin className="h-5 w-5 text-orange-600" />
                  <span className="text-sm font-medium text-gray-600">BTC Dominance</span>
                </div>
                <div className="text-2xl font-bold text-gray-900 mt-1">
                  {globalData.market_cap_percentage.btc.toFixed(1)}%
                </div>
              </div>
            </div>
          )}
        </CardHeader>
      </Card>

      {/* Main Content Tabs */}
      <Card className="bg-gradient-to-br from-white to-gray-50 border-0 shadow-xl overflow-hidden">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <div className="border-b border-gray-100 bg-white/80 backdrop-blur-sm">
            <TabsList className="grid w-full grid-cols-3 bg-transparent border-0 h-16 p-2">
              <TabsTrigger 
                value="market" 
                className="relative flex items-center gap-2 data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 data-[state=active]:shadow-sm rounded-lg font-medium transition-all"
              >
                <Eye className="h-4 w-4" />
                Live Market
              </TabsTrigger>
              <TabsTrigger 
                value="charts" 
                className="relative flex items-center gap-2 data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 data-[state=active]:shadow-sm rounded-lg font-medium transition-all"
              >
                <Activity className="h-4 w-4" />
                Institutional Intelligence
              </TabsTrigger>
              <TabsTrigger 
                value="sentiment" 
                className="relative flex items-center gap-2 data-[state=active]:bg-emerald-50 data-[state=active]:text-emerald-700 data-[state=active]:shadow-sm rounded-lg font-medium transition-all"
              >
                <Target className="h-4 w-4" />
                Market Sentiment
              </TabsTrigger>
            </TabsList>
          </div>

          <TabsContent value="market" className="p-0 m-0">
            <div className="p-6">
              {/* Search Section */}
              <div className="mb-6">
                <div className="flex items-center gap-4 mb-4">
                  <h3 className="text-lg font-semibold text-gray-900">Crypto Search</h3>
                  <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                    Smart Loading
                  </Badge>
                </div>
                
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Search any coin... (e.g., Ethereum, DOGE, Shiba)"
                    value={searchQuery}
                    onChange={(e) => {
                      setSearchQuery(e.target.value)
                      searchCoins(e.target.value)
                    }}
                    className="w-full px-4 py-3 pl-12 bg-white border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                  {isSearching && (
                    <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                      <div className="w-5 h-5 border-2 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
                    </div>
                  )}
                </div>

                {/* Search Results */}
                {searchResults.length > 0 && (
                  <div className="mt-4 bg-white border border-gray-200 rounded-xl shadow-lg max-h-64 overflow-y-auto">
                    {searchResults.map((coin, index) => (
                      <div
                        key={coin.id}
                        onClick={() => fetchCoinDetails(coin.id)}
                        className="flex items-center gap-3 p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0"
                      >
                        {coin.large && (
                          <img src={coin.large} alt={coin.name} className="w-8 h-8 rounded-full" />
                        )}
                        <div className="flex-1">
                          <div className="font-medium text-gray-900">{coin.name}</div>
                          <div className="text-sm text-gray-500">{coin.symbol.toUpperCase()}</div>
                        </div>
                        <div className="text-sm text-gray-400">#{coin.market_cap_rank || '?'}</div>
                      </div>
                    ))}
                  </div>
                )}

                {searchQuery && searchResults.length === 0 && !isSearching && (
                  <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-xl">
                    <p className="text-yellow-800">🤔 No coins found. Try searching for "Bitcoin" or "ETH"</p>
                  </div>
                )}
              </div>

              {/* Top Coins Section */}
              <div className="mb-4 flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">Top Cryptocurrencies</h3>
                <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                  Live Data
                </Badge>
              </div>
              
              <div className="grid gap-3 max-h-96 overflow-y-auto">
                {cryptoData.map((crypto, index) => {
                  const IconComponent = getCoinIcon(crypto.symbol)
                  const gradient = getGradientForCoin(crypto.symbol, index)
                  
                  return (
                    <div 
                      key={crypto.id}
                      className="group relative p-4 bg-white/70 backdrop-blur-sm rounded-xl border border-gray-100 hover:shadow-lg hover:border-gray-200 transition-all duration-200 cursor-pointer"
                      onClick={() => {
                        setSelectedCoin(crypto)
                        setActiveTab('charts')
                      }}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          <div className="relative">
                            <div className={`w-12 h-12 bg-gradient-to-br ${gradient} rounded-xl flex items-center justify-center shadow-lg`}>
                              <IconComponent className="h-6 w-6 text-white" />
                            </div>
                            <div className="absolute -top-1 -right-1 w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center text-xs font-bold text-gray-600">
                              {crypto.market_cap_rank}
                            </div>
                          </div>
                          
                          <div>
                            <div className="font-bold text-gray-900 text-lg">{crypto.symbol.toUpperCase()}</div>
                            <div className="text-sm text-gray-500 truncate max-w-32">{crypto.name}</div>
                          </div>
                        </div>
                        
                        <div className="text-right">
                          <div className="font-bold text-gray-900 text-lg">${formatPrice(crypto.current_price)}</div>
                          <div className={`flex items-center gap-1 justify-end text-sm font-medium ${
                            crypto.price_change_percentage_24h >= 0 ? 'text-emerald-600' : 'text-red-500'
                          }`}>
                            {crypto.price_change_percentage_24h >= 0 ? (
                              <ArrowUpRight className="h-3 w-3" />
                            ) : (
                              <ArrowDownRight className="h-3 w-3" />
                            )}
                            {formatPercentage(crypto.price_change_percentage_24h)}
                          </div>
                        </div>
                      </div>
                      
                      <div className="mt-3 pt-3 border-t border-gray-100 flex justify-between text-sm text-gray-600">
                        <span>Vol: {formatVolume(crypto.total_volume)}</span>
                        <span>MCap: {formatVolume(crypto.market_cap)}</span>
                      </div>
                      
                      <div className="absolute inset-0 bg-gradient-to-r from-blue-50/0 to-blue-50/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-xl pointer-events-none" />
                    </div>
                  )
                })}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="charts" className="p-6">
            {institutionalData ? (
              <div className="space-y-6">
                {/* Institutional Intelligence Overview */}
                <div className="text-center mb-8">
                  <h2 className="text-2xl font-bold text-gray-900 mb-2">Professional Market Intelligence</h2>
                  <p className="text-gray-600">Derivatives, Corporate Holdings & Market Structure Analysis</p>
                </div>

                {/* Derivatives Section */}
                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                    <TrendingUp className="w-5 h-5 mr-2" />
                    Derivatives Overview
                  </h3>
                  {institutionalData.derivatives.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b border-gray-200">
                            <th className="text-left py-2 px-3 font-medium text-gray-700">Market</th>
                            <th className="text-right py-2 px-3 font-medium text-gray-700">24h Volume</th>
                            <th className="text-right py-2 px-3 font-medium text-gray-700">Open Interest</th>
                            <th className="text-right py-2 px-3 font-medium text-gray-700">Contract Type</th>
                          </tr>
                        </thead>
                        <tbody>
                          {institutionalData.derivatives.slice(0, 5).map((ticker, index) => (
                            <tr key={index} className="border-b border-gray-100">
                              <td className="py-2 px-3 font-medium">{ticker.market}</td>
                              <td className="py-2 px-3 text-right">${ticker.volume_24h?.toLocaleString() || 'N/A'}</td>
                              <td className="py-2 px-3 text-right">${ticker.open_interest_usd?.toLocaleString() || 'N/A'}</td>
                              <td className="py-2 px-3 text-right">{ticker.contract_type || 'N/A'}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No derivatives data available
                    </div>
                  )}
                </div>

                {/* Corporate Holdings Sections */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Bitcoin Corporate Holdings */}
                  <div className="bg-orange-50 rounded-lg p-6">
                    <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                      <TrendingUp className="w-5 h-5 mr-2" />
                      Bitcoin Corporate Holdings
                    </h3>
                    {institutionalData.corporateHoldings.bitcoin.length > 0 ? (
                      <div className="space-y-3">
                        {institutionalData.corporateHoldings.bitcoin.slice(0, 5).map((company: CorporateHolding, index: number) => (
                          <div key={index} className="flex justify-between items-center p-3 bg-white rounded-lg">
                            <div>
                              <div className="font-medium text-gray-900">{company.name}</div>
                              <div className="text-sm text-gray-600">{company.total_holdings.toLocaleString()} BTC</div>
                            </div>
                            <div className="text-right">
                              <div className="font-medium text-orange-600">
                                ${(company.total_current_value_usd / company.total_holdings).toLocaleString()}
                              </div>
                              <div className="text-sm text-gray-600">per BTC</div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-6 text-gray-500">
                        Loading corporate BTC holdings...
                      </div>
                    )}
                  </div>

                  {/* Ethereum Corporate Holdings */}
                  <div className="bg-blue-50 rounded-lg p-6">
                    <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                      <BarChart3 className="w-5 h-5 mr-2" />
                      Ethereum Corporate Holdings
                    </h3>
                    {institutionalData.corporateHoldings.ethereum.length > 0 ? (
                      <div className="space-y-3">
                        {institutionalData.corporateHoldings.ethereum.slice(0, 5).map((company: CorporateHolding, index: number) => (
                          <div key={index} className="flex justify-between items-center p-3 bg-white rounded-lg">
                            <div>
                              <div className="font-medium text-gray-900">{company.name}</div>
                              <div className="text-sm text-gray-600">{company.total_holdings.toLocaleString()} ETH</div>
                            </div>
                            <div className="text-right">
                              <div className="font-medium text-blue-600">
                                ${(company.total_current_value_usd / company.total_holdings).toLocaleString()}
                              </div>
                              <div className="text-sm text-gray-600">per ETH</div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-6 text-gray-500">
                        Loading corporate ETH holdings...
                      </div>
                    )}
                  </div>
                </div>

                {/* Market Structure Analysis */}
                <div className="bg-green-50 rounded-lg p-6">
                  <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                    <TrendingUp className="w-5 h-5 mr-2" />
                    Market Structure Analysis
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="bg-white rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-green-600">
                        {institutionalData.derivatives.length}
                      </div>
                      <div className="text-sm text-gray-600">Active Derivatives</div>
                    </div>
                    <div className="bg-white rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-orange-600">
                        {institutionalData.corporateHoldings.bitcoin.length}
                      </div>
                      <div className="text-sm text-gray-600">BTC Institutions</div>
                    </div>
                    <div className="bg-white rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-blue-600">
                        {institutionalData.corporateHoldings.ethereum.length}
                      </div>
                      <div className="text-sm text-gray-600">ETH Institutions</div>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-64 text-gray-500">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
                <div className="text-lg font-medium text-gray-900 mb-2">Loading Institutional Intelligence</div>
                <div className="text-gray-600">Fetching derivatives and corporate holdings data...</div>
              </div>
            )}
          </TabsContent>

          <TabsContent value="sentiment" className="p-6">
            <div className="text-center py-12">
              <h3 className="text-xl font-semibold text-gray-900 mb-2">Market Sentiment Analysis</h3>
              <p className="text-gray-600">Coming soon...</p>
            </div>
          </TabsContent>
        </Tabs>
      </Card>
    </div>
  )
}
                        {/* Enhanced Chart background with gradient */}
                        <defs>
                          <linearGradient id="chartGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                            <stop offset="0%" stopColor="#8b5cf6" stopOpacity="0.3"/>
                            <stop offset="50%" stopColor="#8b5cf6" stopOpacity="0.1"/>
                            <stop offset="100%" stopColor="#8b5cf6" stopOpacity="0.02"/>
                          </linearGradient>
                          <linearGradient id="lineGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                            <stop offset="0%" stopColor="#3b82f6"/>
                            <stop offset="50%" stopColor="#8b5cf6"/>
                            <stop offset="100%" stopColor="#ec4899"/>
                          </linearGradient>
                          <filter id="glow">
                            <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                            <feMerge> 
                              <feMergeNode in="coloredBlur"/>
                              <feMergeNode in="SourceGraphic"/>
                            </feMerge>
                          </filter>
                        </defs>
                        
                        {/* Dynamic Grid lines based on data */}
                        {[0, 1, 2, 3, 4, 5].map(i => (
                          <line
                            key={`grid-${i}`}
                            x1="40"
                            y1={30 + i * 32}
                            x2="480"
                            y2={30 + i * 32}
                            stroke="#e5e7eb"
                            strokeWidth="1"
                            opacity="0.4"
                          />
                        ))}
                        
                        {/* Vertical time grid */}
                        {Array.from({length: 6}, (_, i) => (
                          <line
                            key={`vgrid-${i}`}
                            x1={40 + i * 88}
                            y1="30"
                            x2={40 + i * 88}
                            y2="190"
                            stroke="#e5e7eb"
                            strokeWidth="1"
                            opacity="0.3"
                          />
                        ))}
                        
                        {/* Enhanced Price line with animations */}
                        {(() => {
                          const prices = historicalData.map(d => d.close)
                          const minPrice = Math.min(...prices)
                          const maxPrice = Math.max(...prices)
                          const priceRange = maxPrice - minPrice || 1
                          
                          const points = historicalData.map((point, index) => {
                            const x = 40 + (index / (historicalData.length - 1)) * 440
                            const y = 30 + (1 - (point.close - minPrice) / priceRange) * 160
                            return `${x},${y}`
                          }).join(' ')
                          
                          const pathData = `M ${points.split(' ').map(p => p.split(',').join(' ')).join(' L ')}`
                          
                          return (
                            <>
                              {/* Glow effect area under curve */}
                              <path
                                d={`${pathData} L 480,190 L 40,190 Z`}
                                fill="url(#chartGradient)"
                                opacity="0.6"
                              />
                              
                              {/* Main price line with gradient */}
                              <path
                                d={pathData}
                                fill="none"
                                stroke="url(#lineGradient)"
                                strokeWidth="3"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                filter="url(#glow)"
                                style={{
                                  strokeDasharray: "1000",
                                  strokeDashoffset: "1000",
                                  animation: "drawLine 2s ease-in-out forwards"
                                }}
                              />
                              
                              {/* Interactive data points */}
                              {historicalData.map((point, index) => {
                                const x = 40 + (index / (historicalData.length - 1)) * 440
                                const y = 30 + (1 - (point.close - minPrice) / priceRange) * 160
                                const isLatest = index === historicalData.length - 1
                                
                                return (
                                  <g key={index}>
                                    {/* Hover area */}
                                    <circle
                                      cx={x}
                                      cy={y}
                                      r="8"
                                      fill="transparent"
                                      className="hover:fill-purple-100 cursor-pointer transition-all"
                                    />
                                    {/* Actual point */}
                                    <circle
                                      cx={x}
                                      cy={y}
                                      r={isLatest ? "5" : "3"}
                                      fill={isLatest ? "#8b5cf6" : "#ffffff"}
                                      stroke="#8b5cf6"
                                      strokeWidth="2"
                                      className="hover:r-6 transition-all cursor-pointer"
                                      style={{
                                        animation: isLatest ? "pulse 2s infinite" : "none"
                                      }}
                                    >
                                      <title>
                                        ${formatPrice(point.close)} on {new Date(point.time * 1000).toLocaleDateString()}
                                        {point.volume && `\nVolume: ${formatVolume(point.volume)}`}
                                      </title>
                                    </circle>
                                  </g>
                                )
                              })}
                            </>
                          )
                        })()}
                      </svg>
                      
                      {/* Enhanced Price labels with better formatting */}
                      <div className="absolute left-0 top-8 h-40 flex flex-col justify-between text-xs text-gray-500 font-medium">
                        {(() => {
                          const prices = historicalData.map(d => d.close)
                          const minPrice = Math.min(...prices)
                          const maxPrice = Math.max(...prices)
                          const midPrice = (maxPrice + minPrice) / 2
                          return [
                            <div key="max" className="bg-white px-1 rounded shadow-sm">${formatPrice(maxPrice)}</div>,
                            <div key="mid" className="bg-white px-1 rounded shadow-sm">${formatPrice(midPrice)}</div>,
                            <div key="min" className="bg-white px-1 rounded shadow-sm">${formatPrice(minPrice)}</div>
                          ]
                        })()}
                      </div>
                      
                      {/* Time labels */}
                      <div className="absolute bottom-0 left-10 right-10 flex justify-between text-xs text-gray-500 font-medium">
                        {Array.from({length: 4}, (_, i) => {
                          const dataIndex = Math.floor(i * (historicalData.length - 1) / 3)
                          const point = historicalData[dataIndex]
                          if (!point) return null
                          return (
                            <div key={i} className="bg-white px-1 rounded shadow-sm">
                              {new Date(point.time * 1000).toLocaleDateString(undefined, { 
                                month: 'short', 
                                day: 'numeric' 
                              })}
                            </div>
                          )
                        })}
                      </div>
                    </div>

                    {/* Enhanced footer with more metrics */}
                    <div className="flex justify-between items-center mt-4 pt-4 border-t border-gray-100">
                      <div className="flex items-center gap-4">
                        {(() => {
                          const firstPrice = historicalData[0]?.close || 0
                          const lastPrice = historicalData[historicalData.length - 1]?.close || 0
                          const change = ((lastPrice - firstPrice) / firstPrice) * 100
                          const isPositive = change >= 0
                          
                          return (
                            <>
                              <div className="flex items-center gap-2">
                                {isPositive ? (
                                  <TrendingUp className="h-4 w-4 text-emerald-600" />
                                ) : (
                                  <TrendingDown className="h-4 w-4 text-red-500" />
                                )}
                                <span className={`text-sm font-medium ${isPositive ? 'text-emerald-600' : 'text-red-500'}`}>
                                  {formatPercentage(change)} over {timeframe} day{timeframe !== '1' ? 's' : ''}
                                </span>
                              </div>
                              
                              {historicalData.length > 1 && (
                                <div className="text-sm text-gray-600">
                                  Volatility: {(() => {
                                    const prices = historicalData.map(d => d.close)
                                    const returns = prices.slice(1).map((price, i) => 
                                      Math.abs((price - prices[i]) / prices[i])
                                    )
                                    const avgVolatility = returns.reduce((sum, ret) => sum + ret, 0) / returns.length
                                    return `${(avgVolatility * 100).toFixed(1)}%`
                                  })()}
                                </div>
                              )}
                            </>
                          )
                        })()}
                      </div>
                      
                      <div className="flex items-center gap-2 text-xs text-gray-500">
                        <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                        <span>Live CoinGecko data</span>
                      </div>
                    </div>
                    
                    {/* CSS animations */}
                    <style jsx>{`
                      @keyframes drawLine {
                        to { stroke-dashoffset: 0; }
                      }
                      @keyframes pulse {
                        0%, 100% { opacity: 1; transform: scale(1); }
                        50% { opacity: 0.7; transform: scale(1.1); }
                      }
                    `}</style>
                  </div>
                ) : (
                  <div className="bg-gradient-to-br from-gray-50 to-white rounded-xl border border-gray-200 p-8 h-80 flex items-center justify-center relative overflow-hidden">
                    <div className="text-center z-10">
                      <div className="w-16 h-16 bg-gradient-to-br from-purple-100 to-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <BarChart3 className="h-8 w-8 text-purple-600 animate-pulse" />
                      </div>
                      <div className="text-xl font-bold text-gray-900 mb-2">⏳ Fetching Chart Data</div>
                      <div className="text-gray-600 mb-2">Loading historical prices from CoinGecko...</div>
                      <div className="text-sm text-gray-500">Rate limits may cause delays - patience pays off!</div>
                    </div>
                    
                    {/* Enhanced decorative background elements */}
                    <div className="absolute top-4 right-4 w-24 h-24 bg-gradient-to-br from-purple-100/50 to-blue-100/50 rounded-full blur-xl animate-pulse" />
                    <div className="absolute bottom-4 left-4 w-32 h-32 bg-gradient-to-br from-blue-100/50 to-cyan-100/50 rounded-full blur-xl animate-bounce" />
                  </div>
                )}
              </div>
            ) : (
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                  <BarChart3 className="h-8 w-8 text-gray-400" />
                </div>
                <div className="text-lg font-medium text-gray-900 mb-2">Select a Cryptocurrency</div>
                <div className="text-gray-600">Choose a coin from the market view to see historical data</div>
              </div>
            )}
          </TabsContent>

          <TabsContent value="sentiment" className="p-6">
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Market Sentiment Analysis</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Fear & Greed Index */}
                {fearGreedIndex && (
                  <div className="bg-gradient-to-br from-white to-gray-50 rounded-xl border border-gray-200 p-6 text-center">
                    <div className="flex items-center justify-center gap-2 mb-4">
                      <Target className="h-5 w-5 text-gray-600" />
                      <span className="text-sm font-medium text-gray-600">Fear & Greed Index</span>
                    </div>
                    <div className="relative w-24 h-24 mx-auto mb-4">
                      <div className="absolute inset-0 rounded-full border-8 border-gray-100"></div>
                      <div 
                        className="absolute inset-0 rounded-full border-8 border-transparent border-t-8 transform -rotate-90"
                        style={{ 
                          borderTopColor: getFearGreedColor(fearGreedIndex.value),
                          transform: `rotate(${(fearGreedIndex.value / 100) * 360 - 90}deg)`
                        }}
                      ></div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span 
                          className="text-2xl font-bold"
                          style={{ color: getFearGreedColor(fearGreedIndex.value) }}
                        >
                          {fearGreedIndex.value}
                        </span>
                      </div>
                    </div>
                    <div 
                      className="text-sm font-medium"
                      style={{ color: getFearGreedColor(fearGreedIndex.value) }}
                    >
                      {fearGreedIndex.label}
                    </div>
                  </div>
                )}

                {/* Market Trend */}
                <div className="bg-gradient-to-br from-white to-gray-50 rounded-xl border border-gray-200 p-6 text-center">
                  <div className="flex items-center justify-center gap-2 mb-4">
                    <TrendingUp className="h-5 w-5 text-gray-600" />
                    <span className="text-sm font-medium text-gray-600">Market Trend</span>
                  </div>
                  <div className="text-3xl font-bold text-gray-900 mb-2">
                    {Math.round((cryptoData.filter(c => c.price_change_percentage_24h > 0).length / cryptoData.length) * 100)}%
                  </div>
                  <div className="text-sm text-gray-600">
                    <span className="text-emerald-600 font-medium">
                      {cryptoData.filter(c => c.price_change_percentage_24h > 0).length}
                    </span>
                    {' '}gaining vs{' '}
                    <span className="text-red-500 font-medium">
                      {cryptoData.filter(c => c.price_change_percentage_24h < 0).length}
                    </span>
                    {' '}losing
                  </div>
                </div>

                {/* Volume Trend */}
                {globalData && (
                  <div className="bg-gradient-to-br from-white to-gray-50 rounded-xl border border-gray-200 p-6 text-center">
                    <div className="flex items-center justify-center gap-2 mb-4">
                      <Activity className="h-5 w-5 text-gray-600" />
                      <span className="text-sm font-medium text-gray-600">24h Volume</span>
                    </div>
                    <div className="text-2xl font-bold text-gray-900 mb-2">
                      {formatVolume(globalData.total_volume.usd)}
                    </div>
                    <div className="text-sm text-gray-600">Total Market Volume</div>
                  </div>
                )}
              </div>

              {/* Market Overview Cards */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg p-4 border border-green-100">
                  <div className="text-green-700 text-sm font-medium">Top Gainer</div>
                  {cryptoData.length > 0 && (
                    <div className="mt-1">
                      <div className="font-bold text-green-900">
                        {cryptoData.reduce((prev, current) => 
                          (prev.price_change_percentage_24h > current.price_change_percentage_24h) ? prev : current
                        ).symbol.toUpperCase()}
                      </div>
                      <div className="text-sm text-green-700">
                        +{Math.max(...cryptoData.map(c => c.price_change_percentage_24h)).toFixed(2)}%
                      </div>
                    </div>
                  )}
                </div>
                
                <div className="bg-gradient-to-br from-red-50 to-pink-50 rounded-lg p-4 border border-red-100">
                  <div className="text-red-700 text-sm font-medium">Top Loser</div>
                  {cryptoData.length > 0 && (
                    <div className="mt-1">
                      <div className="font-bold text-red-900">
                        {cryptoData.reduce((prev, current) => 
                          (prev.price_change_percentage_24h < current.price_change_percentage_24h) ? prev : current
                        ).symbol.toUpperCase()}
                      </div>
                      <div className="text-sm text-red-700">
                        {Math.min(...cryptoData.map(c => c.price_change_percentage_24h)).toFixed(2)}%
                      </div>
                    </div>
                  )}
                </div>
                
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-4 border border-blue-100">
                  <div className="text-blue-700 text-sm font-medium">Avg Change</div>
                  <div className="mt-1">
                    <div className="font-bold text-blue-900">
                      {(cryptoData.reduce((sum, coin) => sum + coin.price_change_percentage_24h, 0) / cryptoData.length).toFixed(2)}%
                    </div>
                    <div className="text-sm text-blue-700">24h Average</div>
                  </div>
                </div>
                
                <div className="bg-gradient-to-br from-purple-50 to-violet-50 rounded-lg p-4 border border-purple-100">
                  <div className="text-purple-700 text-sm font-medium">Market Status</div>
                  <div className="mt-1">
                    <div className="font-bold text-purple-900">
                      {cryptoData.filter(c => c.price_change_percentage_24h > 0).length > cryptoData.length / 2 ? 'Bullish' : 'Bearish'}
                    </div>
                    <div className="text-sm text-purple-700">Overall Trend</div>
                  </div>
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </Card>
    </div>
  )
}

export default CryptoMarketWidget

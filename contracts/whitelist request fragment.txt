import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { useToast } from "@/hooks/use-toast"
import { useContract } from "@/hooks/useContract"
import { ethers } from "ethers"
import { 
  UserCheck, 
  UserX, 
  Clock, 
  CheckCircle, 
  XCircle, 
  RefreshCw,
  Wallet,
  Copy,
  ExternalLink,
  Info
} from "lucide-react"

interface WhitelistRequest {
  requestId: number
  requester: string
  timestamp: number
  processed: boolean
  approved: boolean
}

export default function WhitelistRequestsDashboard() {
  const [requests, setRequests] = useState<WhitelistRequest[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [processingId, setProcessingId] = useState<number | null>(null)
  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null)
  const contract = useContract(provider)
  const { toast } = useToast()

  // Initialize provider
  useEffect(() => {
    const initProvider = async () => {
      if (typeof window !== 'undefined' && window.ethereum) {
        const browserProvider = new ethers.BrowserProvider(window.ethereum)
        setProvider(browserProvider)
      }
    }
    initProvider()
  }, [])

  // Load whitelist requests
  const loadRequests = async () => {
    if (!contract) return
    
    setIsLoading(true)
    try {
      // Get pending requests
      const [requestIds, timestamps, requesters] = await contract.getPendingWhitelistRequests()
      
      const pendingRequests: WhitelistRequest[] = []
      for (let i = 0; i < requestIds.length; i++) {
        pendingRequests.push({
          requestId: Number(requestIds[i]),
          requester: requesters[i],
          timestamp: Number(timestamps[i]) * 1000, // Convert to milliseconds
          processed: false,
          approved: false
        })
      }
      
      // Sort by timestamp (newest first)
      pendingRequests.sort((a, b) => b.timestamp - a.timestamp)
      setRequests(pendingRequests)
      
    } catch (error) {
      console.error("Failed to load whitelist requests:", error)
      toast({
        title: "Error",
        description: "Failed to load whitelist requests",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Load requests on mount and when contract is ready
  useEffect(() => {
    if (contract) {
      loadRequests()
    }
  }, [contract])

  // Process whitelist request
  const processRequest = async (requestId: number, approve: boolean) => {
    if (!contract) return
    
    setProcessingId(requestId)
    try {
      const tx = await contract.processWhitelistRequest(requestId, approve)
      
      toast({
        title: "Transaction Submitted",
        description: `Processing whitelist request...`,
      })
      
      await tx.wait()
      
      toast({
        title: "Success",
        description: `Whitelist request ${approve ? 'approved' : 'rejected'}`,
      })
      
      // Reload requests
      await loadRequests()
      
    } catch (error: any) {
      console.error("Failed to process request:", error)
      toast({
        title: "Error",
        description: error.message || "Failed to process request",
        variant: "destructive"
      })
    } finally {
      setProcessingId(null)
    }
  }

  const copyAddress = (address: string) => {
    navigator.clipboard.writeText(address)
    toast({
      title: "Copied",
      description: "Address copied to clipboard",
    })
  }

  const formatTime = (timestamp: number) => {
    const now = Date.now()
    const diff = now - timestamp
    
    if (diff < 60000) return "Just now"
    if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`
    if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`
    return new Date(timestamp).toLocaleDateString()
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              <UserCheck className="h-5 w-5" />
              Whitelist Requests
            </CardTitle>
            <CardDescription>
              Review and approve new member whitelist requests
            </CardDescription>
          </div>
          <Button
            onClick={loadRequests}
            disabled={isLoading}
            variant="outline"
            size="sm"
          >
            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="space-y-4">
            {[1, 2, 3].map(i => (
              <div key={i} className="bg-gray-50 animate-pulse h-20 rounded-lg" />
            ))}
          </div>
        ) : requests.length === 0 ? (
          <Alert>
            <Info className="h-4 w-4" />
            <AlertTitle>No Pending Requests</AlertTitle>
            <AlertDescription>
              There are no whitelist requests waiting for approval.
            </AlertDescription>
          </Alert>
        ) : (
          <div className="space-y-4">
            {requests.map((request) => (
              <div
                key={request.requestId}
                className="border rounded-lg p-4 hover:bg-gray-50 transition-colors"
              >
                <div className="flex items-center justify-between">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <Wallet className="h-4 w-4 text-gray-500" />
                      <code className="text-sm font-mono">
                        {request.requester.slice(0, 8)}...{request.requester.slice(-6)}
                      </code>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => copyAddress(request.requester)}
                        className="h-6 px-2"
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                      <a
                        href={`https://amoy.polygonscan.com/address/${request.requester}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800"
                      >
                        <ExternalLink className="h-3 w-3" />
                      </a>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-500">
                      <Clock className="h-3 w-3" />
                      {formatTime(request.timestamp)}
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <Button
                      onClick={() => processRequest(request.requestId, true)}
                      disabled={processingId === request.requestId}
                      size="sm"
                      className="bg-green-600 hover:bg-green-700"
                    >
                      {processingId === request.requestId ? (
                        <RefreshCw className="h-4 w-4 animate-spin" />
                      ) : (
                        <>
                          <CheckCircle className="h-4 w-4 mr-1" />
                          Approve
                        </>
                      )}
                    </Button>
                    <Button
                      onClick={() => processRequest(request.requestId, false)}
                      disabled={processingId === request.requestId}
                      size="sm"
                      variant="destructive"
                    >
                      {processingId === request.requestId ? (
                        <RefreshCw className="h-4 w-4 animate-spin" />
                      ) : (
                        <>
                          <XCircle className="h-4 w-4 mr-1" />
                          Reject
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
        
        {/* Stats */}
        <div className="mt-6 pt-6 border-t">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <span>Pending Requests: {requests.length}</span>
            <Badge variant="secondary">
              Auto-refreshes on approval
            </Badge>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}







////////





import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { useToast } from "@/hooks/use-toast"
import { useAccount } from "wagmi"
import { useContract } from "@/hooks/useContract"
import { ethers } from "ethers"
import { UserPlus, Clock, CheckCircle, RefreshCw } from "lucide-react"

interface RequestWhitelistButtonProps {
  className?: string
  variant?: "default" | "outline" | "ghost"
  size?: "sm" | "default" | "lg"
}

export function RequestWhitelistButton({ 
  className, 
  variant = "default", 
  size = "default" 
}: RequestWhitelistButtonProps) {
  const [isRequesting, setIsRequesting] = useState(false)
  const [isWhitelisted, setIsWhitelisted] = useState(false)
  const [hasPendingRequest, setHasPendingRequest] = useState(false)
  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null)
  
  const { address, isConnected } = useAccount()
  const contract = useContract(provider)
  const { toast } = useToast()

  // Initialize provider
  useEffect(() => {
    const initProvider = async () => {
      if (typeof window !== 'undefined' && window.ethereum) {
        const browserProvider = new ethers.BrowserProvider(window.ethereum)
        setProvider(browserProvider)
      }
    }
    initProvider()
  }, [])

  // Check whitelist status
  useEffect(() => {
    const checkStatus = async () => {
      if (!contract || !address) return
      
      try {
        // Check if already whitelisted
        const whitelisted = await contract.whitelist(address)
        setIsWhitelisted(whitelisted)
        
        // Check if has pending request
        const pending = await contract.hasPendingRequest(address)
        setHasPendingRequest(pending)
      } catch (error) {
        console.error("Failed to check whitelist status:", error)
      }
    }